// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package models

import (
	"context"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
  username, password, created_at
) VALUES (
  ?, ?, ?
)
RETURNING id, username, password, created_at
`

type CreateUserParams struct {
	Username  string `json:"username"`
	Password  string `json:"password"`
	CreatedAt int64  `json:"created_at"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser, arg.Username, arg.Password, arg.CreatedAt)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Password,
		&i.CreatedAt,
	)
	return i, err
}

const getUser = `-- name: GetUser :one
SELECT id, username, password, created_at FROM users
WHERE id = ? LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, id int64) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Password,
		&i.CreatedAt,
	)
	return i, err
}

const getUserByUserName = `-- name: GetUserByUserName :one
SELECT id, username, password, created_at FROM users
WHERE username = ? LIMIT 1
`

func (q *Queries) GetUserByUserName(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByUserName, username)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Password,
		&i.CreatedAt,
	)
	return i, err
}

const listUsers = `-- name: ListUsers :many
SELECT id, username, created_at FROM users
ORDER BY username
`

type ListUsersRow struct {
	ID        int64  `json:"id"`
	Username  string `json:"username"`
	CreatedAt int64  `json:"created_at"`
}

func (q *Queries) ListUsers(ctx context.Context) ([]ListUsersRow, error) {
	rows, err := q.db.QueryContext(ctx, listUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListUsersRow
	for rows.Next() {
		var i ListUsersRow
		if err := rows.Scan(&i.ID, &i.Username, &i.CreatedAt); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const returnIncomeHistory = `-- name: ReturnIncomeHistory :many
SELECT resource_name, income, change_timestamp FROM income_history
WHERE user_id = ?
`

type ReturnIncomeHistoryRow struct {
	ResourceName    string `json:"resource_name"`
	Income          int64  `json:"income"`
	ChangeTimestamp int64  `json:"change_timestamp"`
}

func (q *Queries) ReturnIncomeHistory(ctx context.Context, userID int64) ([]ReturnIncomeHistoryRow, error) {
	rows, err := q.db.QueryContext(ctx, returnIncomeHistory, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ReturnIncomeHistoryRow
	for rows.Next() {
		var i ReturnIncomeHistoryRow
		if err := rows.Scan(&i.ResourceName, &i.Income, &i.ChangeTimestamp); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateIncomeHistory = `-- name: UpdateIncomeHistory :exec
INSERT INTO income_history(
    resource_name, income, user_id, change_timestamp
) VALUES (
?, ?, ?, ?
)
`

type UpdateIncomeHistoryParams struct {
	ResourceName    string `json:"resource_name"`
	Income          int64  `json:"income"`
	UserID          int64  `json:"user_id"`
	ChangeTimestamp int64  `json:"change_timestamp"`
}

func (q *Queries) UpdateIncomeHistory(ctx context.Context, arg UpdateIncomeHistoryParams) error {
	_, err := q.db.ExecContext(ctx, updateIncomeHistory,
		arg.ResourceName,
		arg.Income,
		arg.UserID,
		arg.ChangeTimestamp,
	)
	return err
}
